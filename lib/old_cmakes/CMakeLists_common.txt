cmake_minimum_required(VERSION 3.0)

if(${MY_SCOPE} STREQUAL BUILD_ALL_LIBS)
    message("\nThe build scope is ALL LIBS = ${MY_SCOPE}")
else()
    message("\nUSE LOCAL SETTINGS = ${MY_SCOPE}")
endif()

if(USE_CALLER_CONFIG)
    message("\ncaller config = ${USE_CALLER_CONFIG}")
else()
    message("\nuse own config  callerconfig = ${USE_CALLER_CONFIG}")
endif(USE_CALLER_CONFIG)

project(sensor_lib)

# compiler flags
SET(GCC_ADDITIONAL_FLAGS "-std=c++11 -Wall -pedantic -Wextra -Werror -pthread -g -Og")

SET(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} ${GCC_ADDITIONAL_FLAGS}")
message ("\nsetting additional compiler flags:")
message (${CMAKE_CXX_FLAGS} "\n")

# setting directories
set(PROJECT_PATH "/home/ethan/projects/Seifenkiste_1")
set(DIR_COMMON_LIBS ${PROJECT_PATH}/lib/common)

message ("\nusing the following source directories for the libs:")
message (${DIR_COMMON_LIBS})

# include directories
include_directories( ${DIR_COMMON_LIBS} )
message ("\n\nheader dirs:")
get_property(dirs DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES)
foreach(dir ${dirs})
  message(STATUS "dir='${dir}'")
endforeach()


# where the libs are compiled into
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_PATH}/lib/lib_compiled)
#set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
message ("\nsetting library output path:")
message (${CMAKE_LIBRARY_OUTPUT_DIRECTORY} "\n")


# set libraries to use for this project
#set(OPENCV_LIBS opencv_core opencv_highgui opencv_imgproc opencv_video opencv_videoio)
set(MY_LIBS common_stuff)
set(GENERAL_LIBS rt)
set(OPENCV_LIBS opencv_core opencv_highgui opencv_imgproc opencv_video opencv_videoio)
set(ALL_PROJECT_LIBS ${GENERAL_LIBS} ${MY_LIBS} ${OPENCV_LIBS} )
message ("\n\nsetting libraries as :\n" ${ALL_PROJECT_LIBS} "\n")


# define project targets, what will be compiled
#set(PROJECT_SOURCES  ${DIR_COMMON}/message_class.cpp ${DIR_PROJECT}/stream_rpi_camera.cpp )

#set(PROJECT_SOURCES  ${DIR_KICKSTARTER}/threads/1_concurrent_access.cpp)
#set(PROJECT_SOURCES  ${DIR_KICKSTARTER}/threads/2_concurrent_access_class_mutex.cpp)
#set(PROJECT_SOURCES  ${DIR_KICKSTARTER}/threads/3_concurrent_access_queue.cpp)
set(PROJECT_SOURCES  ${DIR_COMMON_LIBS}/test_common_stuff.cpp)

message ("\n\nunit test target to compile")
message ("${PROJECT_SOURCES}")

# add targets 
add_library(common_stuff SHARED ${DIR_COMMON_LIBS}/common.cpp)
#add_library(common_communication SHARED ${DIR_COMMON_LIBS}/common_communication.cpp)
#dd_library(sensor_camera_class SHARED ${DIR_SENSOR_LIBS}/sensor_camera_class.cpp)
#add_library(tcp_class SHARED ${DIR_PROJECT}/tcp_class.cpp)
#add_library(message_queue_class SHARED ${DIR_PROJECT}/message_queue_class.cpp)
#add_library(message_queue_class SHARED ${DIR_COMMON}/message_queue_class.cpp)
#add_library(tcp_server SHARED ${DIR_PC_LIBS}/tcp_server.cpp)

add_executable(test_common_stuff ${PROJECT_SOURCES} )
#add_executable(2_concurrent_access_class_mutex ${PROJECT_SOURCES} )
#add_executable(3_concurrent_access_queue ${PROJECT_SOURCES} )
#add_executable(messaging_framework ${PROJECT_SOURCES} )


#target_link_libraries (sensor_camera_class sensor_base_class)
#target_link_libraries (test_sensor_camera test_common_stuff)


message ("\n\nlink the unit test")
target_link_libraries (test_common_stuff ${ALL_PROJECT_LIBS})

# target_link_libraries (cv_test opencv_core opencv_highgui opencv_imgproc opencv_video opencv_videoio)

#target_link_libraries (tcp_server common_stuff message_class message_queue_class)

#target_link_libraries (1_concurrent_access ${ALL_PROJECT_LIBS})
#target_link_libraries (3_concurrent_access_queue ${ALL_PROJECT_LIBS})
#target_link_libraries (messaging_framework ${ALL_PROJECT_LIBS})

